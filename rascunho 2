import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class MackShop {
 
    static int[] idsProdutos = new int[10];
    static String[] nomesProdutos = new String[10];
    static double[] precosProdutos = new double[10];
    static int[] estoquesProdutos = new int[10];

    static int[] vendaAtualIds = new int[20];
    static int[] vendaAtualQuantidades = new int[20];
    static int qtdItensVenda = 0;

    static int[] historicoIdsPedidos = new int[100];
    static double[] historicoValoresPedidos = new double[100];
    static int[][] historicoItensVendidos = new int[500][3];
    static int qtdPedidos = 0;
    static int qtdItensHistorico = 0;

    static boolean baseInicializada = false;
    static int proximoIdPedido = 1001;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("\n=====MACKSHOP=====");
            System.out.println("1. Inicializar base");
            System.out.println("2. Exibir catálogo de produtos");
            System.out.println("3. Adicionar item à venda");
            System.out.println("4. Ver resumo da venda atual");
            System.out.println("5. Finalizar venda (gerar histórico e Nota Fiscal)");
            System.out.println("6. Ver histórico de vendas");
            System.out.println("7. Buscar venda específica do histórico");
            System.out.println("8. (Admin) Repor estoque");
            System.out.println("9. (Admin) Relatório de estoque baixo");
            System.out.println("0. Sair");
            System.out.print("Escolha uma opção: ");
            opcao = sc.nextInt();

            switch (opcao) {
                case 1: inicializarBase(); break;
                case 2: if(baseInicializada) exibirCatalogo(); else msgNaoInicializado(); break;
                case 3: if(baseInicializada) adicionarItemVenda(); else msgNaoInicializado(); break;
                case 4: if(baseInicializada) verResumoVendaAtual(); else msgNaoInicializado(); break;
                case 5: if(baseInicializada) finalizarVenda(); else msgNaoInicializado(); break;
                case 6: if(baseInicializada) verHistorico(); else msgNaoInicializado(); break;
                case 7: if(baseInicializada) buscarVenda(); else msgNaoInicializado(); break;
                case 8: if(baseInicializada) reporEstoque(); else msgNaoInicializado(); break;
                case 9: if(baseInicializada) relatorioEstoqueBaixo(); else msgNaoInicializado(); break;
                case 0: System.out.println("Volte sempre!..."); break;
                default: System.out.println("Opção inválida!");
            }
        } while (opcao != 0);

        sc.close();
    }

    public static void msgNaoInicializado() {
        System.out.println("Base deve ser inicializada para usar o sistema!");
    }

    public static void inicializarBase() {
        idsProdutos[0] = 101; nomesProdutos[0] = "Mouse Gamer"; precosProdutos[0] = 150.00; estoquesProdutos[0] = 100;
        idsProdutos[1] = 203; nomesProdutos[1] = "Teclado Mecânico"; precosProdutos[1] = 350.00; estoquesProdutos[1] = 50;
        idsProdutos[2] = 401; nomesProdutos[2] = "Headset 7.1"; precosProdutos[2] = 420.50; estoquesProdutos[2] = 75;

        baseInicializada = true;
        qtdItensVenda = 0;
        qtdPedidos = 0;
        qtdItensHistorico = 0;
        System.out.println("Base inicializada!");
    }

    public static void exibirCatalogo() {
        System.out.println("\nCatálogo de Produtos:");
        for (int i = 0; i < idsProdutos.length; i++) {
            if (idsProdutos[i] != 0) {
                if (estoquesProdutos[i] > 0) {
                    System.out.printf("ID: %d | Produto: %s | Preço: R$ %.2f | Estoque: %d\n",
                            idsProdutos[i], nomesProdutos[i], precosProdutos[i], estoquesProdutos[i]);
                } else {
                    System.out.printf("ID: %d | Produto: %s | Preço: R$ %.2f | Estoque: ESGOTADO\n",
                            idsProdutos[i], nomesProdutos[i], precosProdutos[i]);
                }
            }
        }
    }

    public static void adicionarItemVenda() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Digite o ID do produto: ");
        int id = sc.nextInt();
        int pos = buscarProduto(id);
        if (pos == -1) {
            System.out.println("Produto não encontrado.");
            return;
        }
        System.out.print("Digite a quantidade: ");
        int qtd = sc.nextInt();
        if (qtd <= 0) {
            System.out.println("Quantidade inválida.");
            return;
        }
        if (qtd > estoquesProdutos[pos]) {
            System.out.println("Estoque insuficiente.");
            return;
        }
        vendaAtualIds[qtdItensVenda] = id;
        vendaAtualQuantidades[qtdItensVenda] = qtd;
        qtdItensVenda++;
        System.out.println("Item adicionado com sucesso!");
    }

    public static void verResumoVendaAtual() {
        double total = 0;
        System.out.println("\nResumo da Venda Atual:");
        for (int i = 0; i < qtdItensVenda; i++) {
            int id = vendaAtualIds[i];
            int qtd = vendaAtualQuantidades[i];
            int pos = buscarProduto(id);
            double subtotal = qtd * precosProdutos[pos];
            total += subtotal;
            System.out.printf("ID: %d | Produto: %s | Qtd: %d | Vl.Unit: R$ %.2f | Subtotal: R$ %.2f\n",
                    id, nomesProdutos[pos], qtd, precosProdutos[pos], subtotal);
        }
        System.out.printf("TOTAL: R$ %.2f\n", total);
    }

    public static void finalizarVenda() {
        if (qtdItensVenda == 0) {
            System.out.println("Nenhum item na venda atual.");
            return;
        }
        double total = 0;
        int idPedido = proximoIdPedido++;
        for (int i = 0; i < qtdItensVenda; i++) {
            int id = vendaAtualIds[i];
            int qtd = vendaAtualQuantidades[i];
            int pos = buscarProduto(id);
            double subtotal = qtd * precosProdutos[pos];
            total += subtotal;

            estoquesProdutos[pos] -= qtd;

            historicoItensVendidos[qtdItensHistorico][0] = idPedido;
            historicoItensVendidos[qtdItensHistorico][1] = id;
            historicoItensVendidos[qtdItensHistorico][2] = qtd;
            qtdItensHistorico++;
        }

        historicoIdsPedidos[qtdPedidos] = idPedido;
        historicoValoresPedidos[qtdPedidos] = total;
        qtdPedidos++;

        imprimirNotaFiscal(idPedido, total);

        qtdItensVenda = 0;
    }

    public static void verHistorico() {
        System.out.println("\nHistórico de Vendas:");
        for (int i = 0; i < qtdPedidos; i++) {
            System.out.printf("Pedido ID: %d | Valor Total: R$ %.2f\n",
                    historicoIdsPedidos[i], historicoValoresPedidos[i]);
        }
    }

    public static void buscarVenda() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Digite o ID do Pedido: ");
        int idBusca = sc.nextInt();
        for (int i = 0; i < qtdPedidos; i++) {
            if (historicoIdsPedidos[i] == idBusca) {
                imprimirNotaFiscal(idBusca, historicoValoresPedidos[i]);
                return;
            }
        }
        System.out.println("Pedido não encontrado.");
    }

    public static void reporEstoque() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Digite o ID do produto: ");
        int id = sc.nextInt();
        int pos = buscarProduto(id);
        if (pos == -1) {
            System.out.println("Produto não encontrado.");
            return;
        }
        System.out.print("Digite a quantidade para repor: ");
        int qtd = sc.nextInt();
        if (qtd <= 0) {
            System.out.println("Quantidade inválida.");
            return;
        }
        estoquesProdutos[pos] += qtd;
        System.out.println("Estoque atualizado!");
    }

    public static void relatorioEstoqueBaixo() {
        System.out.println("\nProdutos com estoque baixo (< 10):");
        for (int i = 0; i < idsProdutos.length; i++) {
            if (idsProdutos[i] != 0 && estoquesProdutos[i] < 10) {
                System.out.printf("ID: %d | Produto: %s | Estoque: %d\n",
                        idsProdutos[i], nomesProdutos[i], estoquesProdutos[i]);
            }
        }
    }

    public static int buscarProduto(int id) {
        for (int i = 0; i < idsProdutos.length; i++) {
            if (idsProdutos[i] == id) {
                return i;
            }
        }
        return -1;
    }

    public static void imprimirNotaFiscal(int idPedido, double total) {
        LocalDateTime agora = LocalDateTime.now();
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        System.out.println("*********************************************************************************************");
        System.out.println("* MACKSHOP                                                                                 *");
        System.out.println("* CNPJ: 12.345.678/0001-99                                                                  *");
        System.out.println("*********************************************************************************************");
        System.out.println("* NOTA FISCAL - VENDA AO CONSUMIDOR                                                        *");
        System.out.printf ("* Pedido ID: %d\n", idPedido);
        System.out.printf ("* Data de Emissão: %s\n", agora.format(fmt));
        System.out.println("*********************************************************************************************");
        System.out.println("* # | ID   | DESCRIÇÃO         | QTD | VL. UNIT. | VL. TOTAL                               *");
        System.out.println("-----------------------------------------------------------------------------------------------------------");

        double subtotal = 0;
        int count = 1;
        for (int i = 0; i < qtdItensHistorico; i++) {
            if (historicoItensVendidos[i][0] == idPedido) {
                int id = historicoItensVendidos[i][1];
                int qtd = historicoItensVendidos[i][2];
                int pos = buscarProduto(id);
                double valorUnitario = precosProdutos[pos];
                double valorTotal = qtd * valorUnitario;
                subtotal += valorTotal;
                System.out.printf("* %d | %d | %-16s | %3d | R$ %7.2f | R$ %7.2f\n",
                        count++, id, nomesProdutos[pos], qtd, valorUnitario, valorTotal);
            }
        }

        System.out.println("-----------------------------------------------------------------------------------------------------------");
        System.out.printf("* SUBTOTAL | R$ %.2f\n", subtotal);
        System.out.printf("* TOTAL    | R$ %.2f\n", total);
        System.out.println("*********************************************************************************************");
        System.out.println("* OBRIGADO PELA PREFERÊNCIA! VOLTE SEMPRE!                                                 *");
        System.out.println("*********************************************************************************************");
    }
}
